#Использовать v8runner
#Использовать logos

Перем Лог;
Перем ИмяХранилища;
Перем ПапкаХранилищаДев;
Перем ПапкаХранилищаДевПоУмолчанию;
Перем ПользовательХранилищаДев;
Перем ПарольХранилищаДев;
Перем ПапкаХранилищаSRS;
Перем ПапкаХранилищаSRSПоУмолчанию;
Перем ПапкаРепозиторияПоУмолчанию;

Функция ПолучитьКонфигурациюИзРазработческогоХранилища(Конфигуратор)
		
	Параметры = Конфигуратор.ПолучитьПараметрыЗапуска();

	Параметры.Добавить("/ConfigurationRepositoryF """+ ПапкаХранилищаДев + """");
	Параметры.Добавить("/ConfigurationRepositoryN """+ ПользовательХранилищаДев + """");
	Параметры.Добавить("/ConfigurationRepositoryP """+ ПарольХранилищаДев + """");
	Параметры.Добавить("-forceBindAlreadyBindedUser "); // Игногировать наличие подключенной БД

	ФайлРезультата = ОбъединитьПути(Конфигуратор.КаталогСборки(), "source.cf");

	Параметры.Добавить("/ConfigurationRepositoryDumpCfg """ + ФайлРезультата + """");
	
	Конфигуратор.ВыполнитьКоманду(Параметры);
	
	Лог.Информация("Файл конфигурации - " + ФайлРезультата);
	
	Возврат ФайлРезультата;

КонецФункции

Процедура ВыполнитьОбработку()
	
	Конфигуратор = Новый УправлениеКонфигуратором();

	Лог.Информация("Получаем конфиграцию из разработческого хранилища");
	ПутьКФайлуКонфигурации = ПолучитьКонфигурациюИзРазработческогоХранилища(Конфигуратор);

	Лог.Информация("Загружаем конфигурацию из файла во временное хранилище");
	Конфигуратор.ЗагрузитьКонфигурациюИзФайла(ПутьКФайлуКонфигурации);

	Лог.Информация("Создаем хранилище");
	ПроверитьИСоздатьКаталогНовогоХранилища();
	Конфигуратор.СоздатьФайловоеХранилищеКонфигурации(ПапкаХранилищаSRS, "Администратор");

	Лог.Информация("Копируем пользователей из dev хранилища");
	Конфигуратор.КопироватьПользователейИзХранилища(ПапкаХранилищаДев, ПользовательХранилищаДев, ПарольХранилищаДев,
													ПапкаХранилищаSRS, "Администратор");

	Лог.Информация("Очищаем временные файлы");

	УдалитьФайлы(ПутьКФайлуКонфигурации);
	Конфигуратор.УдалитьВременнуюБазу();

	Лог.Информация("Новое хранилище создано");

КонецПроцедуры

Процедура ПроверитьИСоздатьКаталогНовогоХранилища()
	
	Если НЕ НайтиФайлы(ПапкаХранилищаSRS) Тогда
		СоздатьКаталог(ПапкаХранилищаSRS);
	КонецЕсли;	

КонецПроцедуры

Процедура ВывестиПодсказку()
	
	Сообщить("Скрипт создания нового хранилища конфигурации на основании dev хранилища
	|Команда ""help"" - вывод подсказки
	|Параметры:
	|	--srs [имя хранилища]
	|	--u [пользователь хранилища]
	|	--pwd [Пароль пользователя хранилища, по умолчанию """"]
	|	--dev [Путь к хранилищу dev, по умолчанию """ + ПапкаРепозиторияПоУмолчанию + "\UT-DEV""
	|	--new [Путь к новому хранилищу, по умолчанию """ + ПапкаРепозиторияПоУмолчанию + "\[ИмяХранилища]""");

КонецПроцедуры

Процедура ПроверитьНаличиеОбязательныхСвойств(СписокСвойств)
	
	СписокСвойствДляПроверки = Новый Массив;
	СписокСвойствДляПроверки.Добавить("--srs");
	СписокСвойствДляПроверки.Добавить("--u");

	Для каждого Свойство Из СписокСвойствДляПроверки Цикл
		
		ЗначениеСвойства = СписокСвойств.Получить(Свойство);

		Если Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда

			Лог.Ошибка("Проверьте наличие обязательных параметров --srs --u
			|Для вывода подсказки используйте команду help");

			ЗавершитьРаботу(1);

		КонецЕсли;	

	КонецЦикла; 

КонецПроцедуры

Процедура ПроверитьЗаполненностьПараметров(СписокСвойств)
	
	// Проверим заполненность параметров
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	Для каждого Свойство Из СписокСвойств Цикл
		
		Если Не ЗначениеЗаполнено(Свойство.Значение) Тогда
			ТекстОшибки = ТекстОшибки + ?(ТекстОшибки = "", "", Символы.ПС) 
						+ "Для свойства " + Свойство.Ключ + " не указано значение";
			ЕстьОшибки = Истина;			
		КонецЕсли;	

	КонецЦикла;

	Если ЕстьОшибки Тогда
		Лог.Ошибка(ТекстОшибки);
		ЗавершитьРаботу(1);
	КонецЕсли;	

КонецПроцедуры

Процедура РазобратьАргументыКоманднойСтроки()
	
	Результат = Истина;

	// Разберем агрументы командной строки
	СписокСвойств   = Новый Соответствие;
	ТекущееСвойство = "";
	Для Каждого Параметр Из АргументыКоманднойСтроки Цикл

		Если НРег(Параметр) = "help" Тогда
			ВывестиПодсказку();
			ЗавершитьРаботу(1);
		КонецЕсли;
		
		Если СтрНайти(Параметр, "--") <> 0 Тогда
			ТекущееСвойство = НРег(Параметр);
			СписокСвойств.Вставить(ТекущееСвойство);
		Иначе
			СписокСвойств.Вставить(ТекущееСвойство, НРег(Параметр));
			ТекущееСвойство = "";	
		КонецЕсли;	

	КонецЦикла;	

	// Проверим наличие обязательных свойств
	ПроверитьНаличиеОбязательныхСвойств(СписокСвойств);

	// Проверим заполненность параметров
	ПроверитьЗаполненностьПараметров(СписокСвойств);

	// Заполнить переменные
	ЗаполнитьПеременныеСкрипта(СписокСвойств);

КонецПроцедуры

Процедура ЗаполнитьПеременныеСкрипта(СписокСвойств)
	
	ИмяХранилища = СписокСвойств.Получить("--srs");

	ПользовательХранилищаДев = СписокСвойств.Получить("--u");

	ПарольХранилищаДев = ?(СписокСвойств.Получить("--pwd") = Неопределено, "", СписокСвойств.Получить("--pwd"));

	ПапкаХранилищаДев = ?(СписокСвойств.Получить("--dev") = Неопределено, ПапкаХранилищаДевПоУмолчанию, 
									СписокСвойств.Получить("--dev"));

	ПапкаХранилищаSRSПоУмолчанию = ОбъединитьПути(ПапкаРепозиторияПоУмолчанию, ИмяХранилища);

	ПапкаХранилищаSRS = ?(СписокСвойств.Получить("--new") = Неопределено, ПапкаХранилищаSRSПоУмолчанию, 
									СписокСвойств.Получить("--new"));

КонецПроцедуры

Лог = Логирование.ПолучитьЛог("oscript.createStorage");
ПапкаРепозиторияПоУмолчанию = "\\regulations_1c.fs.stdp.ru\repos";
ПапкаХранилищаДевПоУмолчанию = ОбъединитьПути(ПапкаРепозиторияПоУмолчанию, "UT-DEV");

РазобратьАргументыКоманднойСтроки();
	
ВыполнитьОбработку();

